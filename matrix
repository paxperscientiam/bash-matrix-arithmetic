#!/usr/bin/env bash
shopt -s nullglob
shopt -s extglob
shopt -s nocasematch


unset CDPATH

MATH_ROOT_DIR="${TMPDIR}/matrix"

if [[ ! -d $MATH_ROOT_DIR ]]; then
    mkdir "${MATH_ROOT_DIR}"
fi

__="${MATH_ROOT_DIR}"


errCheck.Matrix() {
    if [[ "${#@}" -eq 0 ]]; then
        printf 'Argument cannot be null.\n'
        return 1
    fi
    :
    if [[ ! "${1}"  =~ ^[a-zA-Z]+$ ]]; then
        printf 'Names may only include letters.\n'
        return 1
    fi

    return
}

xstCheck.Matrix() {
    :
}

function Matrix() {
    errCheck.Matrix "${@}" || return 1
    xstCheck.Matrix "${1}" || return 1


    declare -r name="${1}"
    shift

    local ni; ni=0
    local mi; mi=0

    local zv;
    local out_kv=""

    declare -A Matrix

    declare -a T=("$@")

    declare -a M

    local n; n=$((${#T[@]} - 1))
    local x; IFS=, x=(${T[0]})
    local m; m=$((${#x[@]} - 1)); unset x

    while [[ $mi -le ${m} ]]; do
        while [[ $ni -le ${n} ]]; do
            zv=(${T[ni]})
            Matrix[M${ni}${mi}]=${zv[mi]}
            eval 'eval M${ni}${mi}=${zv[mi]}'
            M+=("M${ni}${mi}")
            (( ni+=1 ))
        done
        (( ni=0 ))
        (( mi+=1 ))
    done

    out_kv=$'( '
    for k in ${!Matrix[@]}; do
        out_kv+="[${k}]=${!k} "
    done
    out_kv+=$')'

    printf '%s' "${out_kv}" >| "${__}/matrix.${name}"
}


function Matrix.read() {
    IFS=
    L="$(<"${__}/matrix.$1")"
    echo "$L"
}

function Matrix.list() {
    for I in "${__}/matrix".*; do
        printf '%s\n' "${I[@]/${__}\/matrix\./}"
    done
}


function Matrix.delete() {
    :
    if [[ -f "${__}/matrix.${1}" ]]; then
        rm "${__}/matrix.${1}"
        printf 'Matrix %s removed from cache.\n' "${1}"
    else
        printf 'Matrix %s not found.\n' "${1}"
    fi
}



###### BOOLEAN OPERATIONS


function Matrix.equiv() {
    local A="$(Matrix.read "${1}")"
    local B="$(Matrix.read "${2}")"


    [[ "${A}" == "${B}" ]] && return 0

    return 1
}

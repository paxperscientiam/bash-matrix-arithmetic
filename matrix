#!/usr/bin/env bash
shopt -s nullglob
shopt -s extglob
shopt -s nocasematch


unset CDPATH


MATH_ROOT_DIR="${TMPDIR}/matrix"

if [[ ! -d $MATH_ROOT_DIR ]]; then
    mkdir "${MATH_ROOT_DIR}"
fi

__="${MATH_ROOT_DIR}"


xstCheck.Matrix() {
    IFS=
    if [[ ! -f "${__}/matrix.$1" ]]; then
        printf '%s\n' "No such matrix."
        return 4
    fi
    return 0
}


errCheck.Matrix() {
    if [[ "${#@}" -eq 0 ]]; then
        printf 'Argument cannot be null.\n'
        return 1
    fi
    :
    if [[ ! "${1}"  =~ ^[a-zA-Z]+$ ]]; then
        printf 'Names may only include letters.\n'
        return 1
    fi
    :

    IFS=,
    for x in ${@:2}
    do
        if [[  ! $x =~ ^[0-9]+$ ]]; then
            printf 'All elements must be numeric!\n'
            return 1
        fi
    done

    return 0
}


unset X
unset Y

declare -A X
declare -A Y


function Matrix() {
    # Good
    if xstCheck.Matrix "${@}" >/dev/null 2>&1
    then
      read -p "Overwrite? [y/n]" -n 1 -r
      echo
      [[ ! $REPLY =~ ^[Yy]$ ]] && return
    fi

    if ! errCheck.Matrix "${@}"
    then
        echo shit
        return
    fi


    declare -r name="${1}"
    shift
    IFS=
    echo -e "${@}" >| "${__}/matrix.${name}"
}



function Matrix.read() {
    # check
    #xstCheck.Matrix "${1}" || return 1

    IFS=
    cat "${__}/matrix.$1"
}

function Matrix.show() {
    # check

#    [[ errCheck.Matrix "${1}" -ne 0 ]] && return 1

    if [[ "${1}" == '!' ]]; then
        shift
        printf '[ %s ]\n' "${@// / \]$'\n'\[ }"
        return
    fi

    IFS=
    while read -r p; do
        printf '[ %s ]\n' "${p// / \]$'\n'\[ }"
    done <"${__}/matrix.$1"
}


function Matrix.decompose.row() {
    :
    # should it receive whole matrix or one at a time?
    local row;
    local result;
    IFS=,
    row=(${1})
    count=0
    for el in ${row[@]}; do
        if [[ "${count}" -eq "${2}" ]]; then
            echo $el
            break
        fi
        (( count++ ))
    done
}

function Matrix.decompose() {
    local A; A="$(Matrix.read "${1}")"
    local count; count=0
    IFS=" "
    A_r=(${A})
    for el in ${A_r[@]}; do
        if [[ "${count}" -eq "${2}" ]]; then
            Matrix.decompose.row "${el}" "${3}"
            break
        fi
        (( count++ ))
    done
}

function Matrix.elementGet() {
    # get element at "coordinate"
    IFS=
    local A; A="$(Matrix.read "${1}")"
    local xy
    local r
    local c

    IFS=,
    xy=(${2})
    r=${xy[0]}
    c=${xy[1]}

    Matrix.decompose "${1}" "${r}" "${c}"
}


function Matrix.list() {
    local L
    L=("${__}/matrix".*)

    [[ "${#L[@]}" -eq 0 ]] && \
        printf '%s\n' "There are no matrices defined." && \
        return

    for I in "${__}/matrix".*; do
        printf '%s\n' "${I[@]/${__}\/matrix\./}"
    done
}

function Matrix.workspace.wipe() {
    read -p "Delete all matrices? [y/n]" -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
        return 1
    fi

    local dir
    dir=$(pwd)

    cd "${__:?}" || return 1

    for I in "./matrix".*; do
        \rm "${I}"
    done

    cd "${dir}" || return 1
}


function Matrix.delete() {
    local dir
    dir=$(pwd)

    cd "${__:?}" || return 1
    :
    if [[ -f "./matrix.${1}" ]]; then
        rm "./matrix.${1}"
        printf 'Matrix %s removed from cache.\n' "${1}"
    else
        printf 'Matrix %s not found.\n' "${1}"
    fi

    cd "${dir}" || return 1

}

function Matrix.clear() {
    local dir
    dir=$(pwd)

    cd "${__:?}" || return 1
    :
    if [[ -f "./matrix.${1}" ]]; then
        printf 'null' >| "./matrix.${1}"
    fi

    cd "${dir}" || return 1
}


###### BOOLEAN OPERATIONS
function Matrix.equiv() {
    local A; A="$(Matrix.read "${1}")"
    local B; B="$(Matrix.read "${2}")"

    if [[ "${A}" == "${B}" ]]
    then
        printf 'TRUE\n' && return 0
    else
        printf 'FALSE\n'
        return 1
    fi
}


function Matrix.product.scalar() {
    # new matrix
    local C;
    if [[ "${1}" == *: ]]; then
        C="${1%:}"
        shift
    fi

    local A; A="$(Matrix.read "${1}")"
    local b; b="${2}"
    local count_r; count_r=0
    local count_c; count_c=0
    local result; result=""

    IFS=" "
    for A_r in ${A}; do
        IFS=" "
        IFS=,
        for A_el in ${A_r}; do
            a="${A_el}"
            result+="$(( a*b )),"
            (( count_c+=1 ))
        done
        result=${result%,}
        #
        result+=" "
        count_c=0
        (( count_r+=1 ))
    done

    if [[ ! -z $C ]]; then
        result="${result% }"
        Matrix "${C}" "${result}"
    else
        result="${result% }"
        Matrix.show ! "${result}"
    fi
}

Matrix.product.strassen() {
    local M

    local A; A="$(Matrix.read "${1}")"
    local B; B="$(Matrix.read "${2}")"

    local i; i=0
    local j; j=0


    IFS=" "
    A_r=(${A})
    for A_c in ${A_r[@]}; do
        IFS=,
        for ac in ${A_c[@]}; do
         #   echo $ac
          #  echo M${i}${j}

            (( i+=1 ))
        done
        return
        let i=0
        (( j+=1 ))
    done


#     IFS=,
#     A_c=(${A_r[0]})
#     echo ${A_c[0]}

    return

    local m1
    local m2
    local m3
    local m4
    local m5
    local m6
    local m7

    }


Matrix.product() {
    local A; A="$(Matrix.read "${1}")"
    local B; B="$(Matrix.read "${2}")"
    local C

    # iterators
    local i; i=0
    local j; j=0
    local k; k=0

    # sizes
    local n
    local m
    local p

    # Number of columns minus 1 in B
    IFS=" "
    B_m=(${B[0]})
    B_m0="${B_m}"
    IFS=,
    B_p=(${B_m0})
    p=${#B_p[@]}

    # number of rows minus 1 in A
    IFS=" "
    A_m=(${A})
    n=${#A_m[@]}

    # number of columns minus 1 in A
    A_m0="${A_m[0]}"
    IFS=,
    A_n=(${A_m0})
    m=${#A_n[@]}

    local slice
    # don't touch outer loop!
    until [[ $i -eq $n ]]; do
        IFS=" "
        i_k=(${A})
        #echo ${i_k[$i]}
        until [[ $j -eq $(( p+1 )) ]]; do
            let sum=0
            #k_p
            IFS=" "
            k_p=(${B})
            _kp=${k_p[$j]}
            IFS=,
            kp=(${_kp})
            slice+=${kp[0]}
          #  echo ${slice}
            #return
            until [[ $k -eq $(( m+1 )) ]]; do
                echo $slice

               # echo ${k_p[@]}

      #           :
#                 IFS=" "
#                 i_k=(${A})
#                 echo ${i_k[$i]}


#                # return
#                 # this is first row of A
#                 IFS=,
#                 fgd=(${i_k[$i]})
#                 #echo ${fgd[$k]}

#                 IFS=" "
#                 _kj=(${B[0]})

#                 IFS=,
#                 for o in ${_kj[0]}; do
#                     IFS=,
#                     ik=${fgd[$k]}
#                     kj=$o
#                     IFS=
#                  #   echo "A_mn=$ik"
#                  ##   echo "B_pm=$kj"
#                     #sum=$(( $sum + (( $kj*$ik )) ))
#                     #echo $sum
#                 done
             #   return
                #return
                #echo $m

                #echo $i $k
                # m is number of columns in A(k)
                # n is number of rows in A(i)

                # m is number of rows in B(k)
                # p is number of columns in B(p)
                (( k++ ))
            done

            k=0
           # return
            (( j++ ))
        done
        slice=""

        j=0
        (( i++ ))
    done
}

###### ARITHMETIC OPERATIONS
function Matrix.negate() {
    local B;
    local args;
    if [[ "${1}" == *: ]]; then
        B="${1%:}"
        args="${1} ${2}"
        shift
    fi

    IFS=" "
    args="${args:=${1}}"
    args+=$' -1'
    args=(${args[@]})
    Matrix.product.scalar "${args[@]}"
}



function Matrix.add() {
   # new matrix
    local C;
    local args;
    if [[ "${1}" == *: ]]; then
        C="${1%:}"
        shift
    fi

    local A; A="$(Matrix.read "${1}")"
    local B; B="$(Matrix.read "${2}")"

    local count_r; count_r=0
    local count_c; count_c=0
    local result; result=""

    IFS=" "
    for A_r in ${A}; do
        IFS=" "
        B_r=(${B})
        IFS=,
        B_el=(${B_r[$count_r]})
        for A_el in ${A_r}; do
            a="${A_el}"
            b=${B_el[$count_c]}
            result+="$(( a+b )),"
            (( count_c+=1 ))
        done
        result=${result%,}
        #
        result+=" "
        count_c=0
        (( count_r+=1 ))
    done

    if [[ ! -z $C ]]; then
        result="${result% }"
        Matrix "${C}" "${result}"
    else
        result="${result% }"
        Matrix.show ! "${result}"
    fi

}


function Matrix.subtract() {
    Matrix.negate "${2}"
    Matrix.add "${1}" "not.${2}"
}




##### Transformations
function Matrix.xpose.1() {
    # naive
    local A; A="$(Matrix.read "${1}")"

    local count_r; count_r=0
    local count_c; count_c=0
    local result; result=""

    local n; n=0
    local m; m=0


    IFS=,
    _serial="${A// /,}"
    serial=(${_serial[@]})

    # matrix length
    length="${#serial[@]}"

    IFS=" "
    for A_r in ${A}; do
        (( n+=1 ))
    done

    IFS=" "
    A_r=(${A})

    IFS=,
    for A_c in ${A_r[0]}; do
        (( m+=1 ))
    done



    count=0
    _n=0
    _m=0
    until [[ $count -eq $length ]]; do
        :
        until [[ $_n -eq $n ]]; do
            echo $count
            (( _n+=1 ))
        done
        (( count+=1 ))
    done



    return


   #  IFS=" "
#     for A_r in ${A}; do
#         IFS=,
#         _r=(${A_r[@]})
#         m="${#_r[@]}"

#         IFS=" "
#         _c=(${A_r[@]})
#         echo "${_c[@]}";return

#      #   until [[ $z -eq
#   #       for A_el in ${A_r}; do
# #             z="${count_r},${count_c}=${A_el}"
# #             echo "${z}"


# #             (( count_c+=1 ))

# #         done
# #         result=${result%,}
# #         #
# #         result+=" "
# #         count_c=0
# #         (( count_r+=1 ))

#     done
#     result="${result%\\n}"
#     IFS=
#     echo -e "${result}"

}


function Matrix.inverse() {
    :
}

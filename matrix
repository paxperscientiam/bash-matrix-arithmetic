#!/usr/bin/env bash
shopt -s nullglob
shopt -s extglob
shopt -s nocasematch


unset CDPATH


MATH_ROOT_DIR="${TMPDIR}/matrix"

if [[ ! -d $MATH_ROOT_DIR ]]; then
    mkdir "${MATH_ROOT_DIR}"
fi

__="${MATH_ROOT_DIR}"


errCheck.Matrix() {
    if [[ "${#@}" -eq 0 ]]; then
        printf 'Argument cannot be null.\n'
        return 1
    fi
    :
    if [[ ! "${1}"  =~ ^[a-zA-Z]+$ ]]; then
        printf 'Names may only include letters.\n'
        return 1
    fi
    :
    IFS=,
    for x in ${@:2}
    do
        if [[  ! $x =~ ^[0-9]+$ ]]; then
            printf 'All elements must be numeric!\n'
            return 1
        fi

    done

    return 0
}

xstCheck.Matrix() {
    [[ ! -f "${__}/matrix.$1" ]] && \
        printf '%s\n' "No such matrix." && return 1
}

unset X
unset Y

declare -A X
declare -A Y


function Matrix() {
    # Good
 #   errCheck.Matrix "${@}" || return 1
 #   xstCheck.Matrix "${1}" && return 1
    declare -r name="${1}"
    shift
    IFS=
    echo -e "${@}" >| "${__}/matrix.${name}"
}

function Matrix.read() {
  # xstCheck.Matrix "$1" || return 1
 #   return
    IFS=
    cat "${__}/matrix.$1"
}

function Matrix.show() {
    # GOOD
    if [[ "${1}" == '!' ]]; then
        shift
        printf '[ %s ]\n' "${@// / \]$'\n'\[ }"
        return
    fi

    IFS=
    while read -r p; do
        printf '[ %s ]\n' "${p// / \]$'\n'\[ }"
    done <"${__}/matrix.$1"
}

function Matrix.list() {
    local L
    L=("${__}/matrix".*)

    [[ "${#L[@]}" -eq 0 ]] && \
        printf '%s\n' "There are no matrices defined." && \
        return

    for I in "${__}/matrix".*; do
        printf '%s\n' "${I[@]/${__}\/matrix\./}"
    done
}

function Matrix.workspace.wipe() {
    read -p "Delete all matrices? [y/n]" -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
        return 1
    fi

    local dir
    dir=$(pwd)

    cd "${__:?}" || return 1

    for I in "./matrix".*; do
        \rm "${I}"
    done

    cd "${dir}" || return 1
}


function Matrix.delete() {
    local dir
    dir=$(pwd)

    cd "${__:?}" || return 1
    :
    if [[ -f "./matrix.${1}" ]]; then
        rm "./matrix.${1}"
        printf 'Matrix %s removed from cache.\n' "${1}"
    else
        printf 'Matrix %s not found.\n' "${1}"
    fi

    cd "${dir}" || return 1

}

function Matrix.clear() {
    local dir
    dir=$(pwd)

    cd "${__:?}" || return 1
    :
    if [[ -f "./matrix.${1}" ]]; then
        printf 'null' >| "./matrix.${1}"
    fi

    cd "${dir}" || return 1
}


###### BOOLEAN OPERATIONS
function Matrix.equiv() {
    local A; A="$(Matrix.read "${1}")"
    local B; B="$(Matrix.read "${2}")"

    if [[ "${A}" == "${B}" ]]
    then
        printf 'TRUE\n' && return 0
    else
        printf 'FALSE\n'
        return 1
    fi
}


function Matrix.product.scalar() {
    # new matrix
    local C;
    if [[ "${1}" == *: ]]; then
        C="${1%:}"
        shift
    fi

    local A; A="$(Matrix.read "${1}")"
    local b; b="${2}"
    local count_r; count_r=0
    local count_c; count_c=0
    local result; result=""

    IFS=" "
    for A_r in ${A}; do
        IFS=" "
        IFS=,
        for A_el in ${A_r}; do
            a="${A_el}"
            result+="$(( a*b )),"
            (( count_c+=1 ))
        done
        result=${result%,}
        #
        result+=" "
        count_c=0
        (( count_r+=1 ))
    done

    if [[ ! -z $C ]]; then
        result="${result% }"
        Matrix "${C}" "${result}"
    else
        result="${result% }"
        Matrix.show ! "${result}"
    fi
}



Matrix.product() {
    local A; A="$(Matrix.read "${1}")"
    local B; B="$(Matrix.read "${2}")"
    local C

    local i; i=0
    local j; j=0

    local n
    local m
    local p

    # get number of columns in A
    IFS=" "
    B_m=(${B[0]})
    B_m0="${B_m}"
    IFS=,
    B_p=(${B_m0})
    p=${#B_p[@]}

    A_m=(${A})
    n=${#A_m[@]}
    A_m0="${A_m[0]}"
    IFS=,
    A_n=(${A_m0})
    m=${#A_n[@]}



    until [[ $i -eq $n ]]; do
        echo i=$i
        until [[ $j -eq $p ]]; do
            echo j=$j
            (( j++ ))
        done
        (( i++ ))
    done


    return


    IFS=" "
    for A_r in ${A}; do
        IFS=" "
        echo "${A_r}"
        return
        B_r=(${B})
        IFS=,
        B_el=(${B_r[$count_r]})
        for A_el in ${A_r}; do
            let sum=0
            a="${A_el}"
            b=${B_el[$count_c]}
            result+="$(( a*b )),"
            (( count_c+=1 ))

        done
             count_c=0
             (( count_r+=1 ))
    done

           result="${result% }"
   #     Matrix.show ! "${result}"
#     Input: matrices A and B
#     Let C be a new matrix of the appropriate size
#     For i from 1 to n:
#         For j from 1 to p:
#             Let sum = 0
#             For k from 1 to m:
#                 Set sum ← sum + Aik × Bkj
#             Set Cij ← sum
#     Return C




}

###### ARITHMETIC OPERATIONS
function Matrix.negate() {
    local B;
    local args;
    if [[ "${1}" == *: ]]; then
        B="${1%:}"
        args="${1} ${2}"
        shift
    fi

    IFS=" "
    args="${args:=${1}}"
    args+=$' -1'
    args=(${args[@]})
    Matrix.product.scalar "${args[@]}"
}



function Matrix.add() {
   # new matrix
    local C;
    local args;
    if [[ "${1}" == *: ]]; then
        C="${1%:}"
        shift
    fi

    local A; A="$(Matrix.read "${1}")"
    local B; B="$(Matrix.read "${2}")"

    local count_r; count_r=0
    local count_c; count_c=0
    local result; result=""

    IFS=" "
    for A_r in ${A}; do
        IFS=" "
        B_r=(${B})
        IFS=,
        B_el=(${B_r[$count_r]})
        for A_el in ${A_r}; do
            a="${A_el}"
            b=${B_el[$count_c]}
            result+="$(( a+b )),"
            (( count_c+=1 ))
        done
        result=${result%,}
        #
        result+=" "
        count_c=0
        (( count_r+=1 ))
    done

    if [[ ! -z $C ]]; then
        result="${result% }"
        Matrix "${C}" "${result}"
    else
        result="${result% }"
        Matrix.show ! "${result}"
    fi

}


function Matrix.subtract() {
    Matrix.negate "${2}"
    Matrix.add "${1}" "not.${2}"
}




##### Transformations
function Matrix.xpose.1() {
    # naive
    local A; A="$(Matrix.read "${1}")"

    local count_r; count_r=0
    local count_c; count_c=0
    local result; result=""

    local n; n=0
    local m; m=0


    IFS=,
    _serial="${A// /,}"
    serial=(${_serial[@]})

    # matrix length
    length="${#serial[@]}"

    IFS=" "
    for A_r in ${A}; do
        (( n+=1 ))
    done

    IFS=" "
    A_r=(${A})

    IFS=,
    for A_c in ${A_r[0]}; do
        (( m+=1 ))
    done



    count=0
    _n=0
    _m=0
    until [[ $count -eq $length ]]; do
        :
        until [[ $_n -eq $n ]]; do
            echo $count
            (( _n+=1 ))
        done
        (( count+=1 ))
    done



    return


   #  IFS=" "
#     for A_r in ${A}; do
#         IFS=,
#         _r=(${A_r[@]})
#         m="${#_r[@]}"

#         IFS=" "
#         _c=(${A_r[@]})
#         echo "${_c[@]}";return

#      #   until [[ $z -eq
#   #       for A_el in ${A_r}; do
# #             z="${count_r},${count_c}=${A_el}"
# #             echo "${z}"


# #             (( count_c+=1 ))

# #         done
# #         result=${result%,}
# #         #
# #         result+=" "
# #         count_c=0
# #         (( count_r+=1 ))

#     done
#     result="${result%\\n}"
#     IFS=
#     echo -e "${result}"

}


function Matrix.inverse() {
    :
}

Matrix.product A B
